When would you want to create a remote repository rather keeping all your work local?

	If you want to collaborate on a project, creating a remote repository where multiple
	developers have access to the same repository is beneficial. That is, different members
	of the team can add features and push the data to the remote and others could see and
	pull the updated data to their local repositories so they could continue working on 
	the project.


Why might you want to always pull changes manually rather than having Git automaticallly 
stay up-to-date with your remote repository?

	Sometimes the updated commit that is proposed by one of the users needs to be discussed 
	by all the parties involves to ensure that it runs all on devices and they all have a
	concensus that this is the production code. 

	In that case, manually pullung data makes more sense that automatically staying sync
	with a version that is not the productin code.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Fork is a GitHub feature which allows us to copy a GitHub-based-repository to another
	GitHub-based-repository, without affecting the original repository.
	Clones on the other hand, allows for any other type of making a copy of a repo, namely 
	copying from GitHub to a local machine, or from a local repository to another local one.
	Lastly, branches only operates on a single repository.


	 
What is the benfit of having a copy of the last known state of the remote stored locally?

	The benefit of having the last state of the remote copied locally in origin/master is
	in case we make some changes locally and some changes on GitHub as a result of
	collaboration, we do not miss the local or remote commits by pushing or pulling
	data. In these circumstances, we can merge the local copy of the remote and 
	the local branch to sync our changes.


 
